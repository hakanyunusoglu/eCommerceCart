// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eCommerce.Persistence.Context;

#nullable disable

namespace eCommerce.Persistence.Migrations
{
    [DbContext(typeof(eCommerceDbContext))]
    [Migration("20220408203053_createdb")]
    partial class createdb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("eCommerce.Domain.Entities.AppUser", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            ID = new Guid("97ab0c42-b728-11ec-b909-0242ac120002"),
                            CreatedDate = new DateTime(2022, 4, 8, 23, 30, 53, 632, DateTimeKind.Local).AddTicks(6499),
                            PasswordHash = new byte[] { 103, 128, 62, 221, 173, 71, 80, 247, 100, 78, 51, 135, 158, 189, 220, 4, 113, 230, 125, 172, 38, 33, 182, 184, 188, 110, 163, 38, 60, 167, 95, 179, 45, 148, 210, 109, 251, 48, 216, 252, 173, 124, 99, 161, 18, 112, 161, 141, 196, 11, 201, 213, 91, 236, 109, 5, 25, 244, 143, 81, 56, 165, 84, 104 },
                            PasswordSalt = new byte[] { 60, 156, 104, 254, 224, 194, 73, 170, 243, 156, 165, 3, 188, 103, 162, 181, 138, 224, 165, 189, 140, 220, 117, 250, 224, 188, 50, 171, 18, 200, 164, 58, 120, 93, 49, 182, 137, 181, 59, 4, 186, 120, 224, 250, 142, 240, 96, 218, 27, 63, 118, 117, 43, 208, 120, 191, 221, 139, 200, 66, 130, 118, 198, 174, 133, 178, 57, 147, 253, 85, 6, 73, 143, 1, 214, 155, 132, 17, 125, 13, 43, 136, 244, 124, 123, 175, 76, 46, 189, 107, 6, 39, 69, 56, 10, 115, 171, 120, 110, 40, 14, 234, 35, 167, 145, 15, 65, 186, 20, 230, 235, 90, 221, 154, 38, 148, 84, 248, 209, 250, 82, 137, 206, 186, 59, 243, 165, 62 },
                            Username = "hakan"
                        });
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.AppUserAddress", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("UsersAddresses");

                    b.HasData(
                        new
                        {
                            ID = new Guid("df9b82d0-b75e-11ec-b909-0242ac120002"),
                            Address = "Hadımköy Arnavutköy",
                            City = "Istanbul",
                            CreatedDate = new DateTime(2022, 4, 8, 23, 30, 53, 632, DateTimeKind.Local).AddTicks(7059)
                        });
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.AppUserInfo", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("userAddressID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("userID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("userAddressID");

                    b.HasIndex("userID")
                        .IsUnique();

                    b.ToTable("UsersInfo");

                    b.HasData(
                        new
                        {
                            ID = new Guid("bc32c678-b75e-11ec-b909-0242ac120002"),
                            CreatedDate = new DateTime(2022, 4, 8, 23, 30, 53, 632, DateTimeKind.Local).AddTicks(7032),
                            Email = "hakanyunusoglu93@gmail.com",
                            Name = "Hakan",
                            Phone = "0535 555 55 55",
                            Surname = "Yunusoğlu",
                            userAddressID = new Guid("df9b82d0-b75e-11ec-b909-0242ac120002"),
                            userID = new Guid("97ab0c42-b728-11ec-b909-0242ac120002")
                        });
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.Cart", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("userID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.ToTable("Carts");

                    b.HasData(
                        new
                        {
                            ID = new Guid("b6685975-1700-4898-8f45-d60b8a12dc8d"),
                            CreatedDate = new DateTime(2022, 4, 8, 23, 30, 53, 632, DateTimeKind.Local).AddTicks(6997),
                            userID = new Guid("97ab0c42-b728-11ec-b909-0242ac120002")
                        });
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.CartItem", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("cartID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("productID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("cartID");

                    b.HasIndex("productID");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            ID = new Guid("c557e1ce-b638-11ec-b909-0242ac120002"),
                            CreatedDate = new DateTime(2022, 4, 8, 23, 30, 53, 632, DateTimeKind.Local).AddTicks(6796),
                            Description = "Electronic Equipment",
                            Title = "Computer"
                        },
                        new
                        {
                            ID = new Guid("db9572ee-b638-11ec-b909-0242ac120002"),
                            CreatedDate = new DateTime(2022, 4, 8, 23, 30, 53, 632, DateTimeKind.Local).AddTicks(6805),
                            Description = "Electronic Small Equipment",
                            Title = "Tablet"
                        },
                        new
                        {
                            ID = new Guid("e275007a-b638-11ec-b909-0242ac120002"),
                            CreatedDate = new DateTime(2022, 4, 8, 23, 30, 53, 632, DateTimeKind.Local).AddTicks(6809),
                            Description = "Electronic Smart Equipment",
                            Title = "Phone"
                        });
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("orderState")
                        .HasColumnType("int");

                    b.Property<Guid>("userID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("userID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.OrderItem", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("orderID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("productID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("orderID");

                    b.HasIndex("productID");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("categoryID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("categoryID");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ID = new Guid("415220a0-b639-11ec-b909-0242ac120002"),
                            CreatedDate = new DateTime(2022, 4, 8, 23, 30, 53, 632, DateTimeKind.Local).AddTicks(6864),
                            Description = "Xiaomi Smart Phone",
                            Image = "productimg/03.jpg",
                            Name = "Mobile Phone",
                            Title = "Smart Phone",
                            categoryID = new Guid("e275007a-b638-11ec-b909-0242ac120002")
                        },
                        new
                        {
                            ID = new Guid("5186d10a-b639-11ec-b909-0242ac120002"),
                            CreatedDate = new DateTime(2022, 4, 8, 23, 30, 53, 632, DateTimeKind.Local).AddTicks(6872),
                            Description = "Apple new generation",
                            Image = "productimg/02.jpg",
                            Name = "Apple Tablet",
                            Title = "Tablet",
                            categoryID = new Guid("db9572ee-b638-11ec-b909-0242ac120002")
                        },
                        new
                        {
                            ID = new Guid("5d80aa30-b639-11ec-b909-0242ac120002"),
                            CreatedDate = new DateTime(2022, 4, 8, 23, 30, 53, 632, DateTimeKind.Local).AddTicks(6876),
                            Description = "i7 notebook",
                            Image = "productimg/01.jpg",
                            Name = "Asus Notebook",
                            Title = "Notebook",
                            categoryID = new Guid("c557e1ce-b638-11ec-b909-0242ac120002")
                        });
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.SellerList", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("productID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("productID");

                    b.ToTable("SellerLists");

                    b.HasData(
                        new
                        {
                            ID = new Guid("6571cb0c-b639-11ec-b909-0242ac120002"),
                            CreatedDate = new DateTime(2022, 4, 8, 23, 30, 53, 632, DateTimeKind.Local).AddTicks(6919),
                            Price = 4999m,
                            Quantity = 10,
                            productID = new Guid("415220a0-b639-11ec-b909-0242ac120002")
                        },
                        new
                        {
                            ID = new Guid("6ad5a76c-b639-11ec-b909-0242ac120002"),
                            CreatedDate = new DateTime(2022, 4, 8, 23, 30, 53, 632, DateTimeKind.Local).AddTicks(6934),
                            Price = 3856m,
                            Quantity = 5,
                            productID = new Guid("5186d10a-b639-11ec-b909-0242ac120002")
                        },
                        new
                        {
                            ID = new Guid("713aeebe-b639-11ec-b909-0242ac120002"),
                            CreatedDate = new DateTime(2022, 4, 8, 23, 30, 53, 632, DateTimeKind.Local).AddTicks(6938),
                            Price = 8999m,
                            Quantity = 16,
                            productID = new Guid("5d80aa30-b639-11ec-b909-0242ac120002")
                        });
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.AppUserInfo", b =>
                {
                    b.HasOne("eCommerce.Domain.Entities.AppUserAddress", "UserAddress")
                        .WithMany("userInfo")
                        .HasForeignKey("userAddressID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eCommerce.Domain.Entities.AppUser", "User")
                        .WithOne("userInfo")
                        .HasForeignKey("eCommerce.Domain.Entities.AppUserInfo", "userID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("UserAddress");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.CartItem", b =>
                {
                    b.HasOne("eCommerce.Domain.Entities.Cart", "Cart")
                        .WithMany("CartItemList")
                        .HasForeignKey("cartID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eCommerce.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("productID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.Order", b =>
                {
                    b.HasOne("eCommerce.Domain.Entities.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("userID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.OrderItem", b =>
                {
                    b.HasOne("eCommerce.Domain.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("orderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eCommerce.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("productID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.Product", b =>
                {
                    b.HasOne("eCommerce.Domain.Entities.Category", "category")
                        .WithMany("ProductList")
                        .HasForeignKey("categoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("category");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.SellerList", b =>
                {
                    b.HasOne("eCommerce.Domain.Entities.Product", "product")
                        .WithMany("SellerList")
                        .HasForeignKey("productID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("product");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.AppUser", b =>
                {
                    b.Navigation("userInfo")
                        .IsRequired();
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.AppUserAddress", b =>
                {
                    b.Navigation("userInfo");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.Cart", b =>
                {
                    b.Navigation("CartItemList");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.Category", b =>
                {
                    b.Navigation("ProductList");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.Product", b =>
                {
                    b.Navigation("SellerList");
                });
#pragma warning restore 612, 618
        }
    }
}
